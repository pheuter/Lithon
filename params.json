{"tagline":"A toy compiler that translates a small subset of Scheme into Python","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Lithon","google":"","body":"### Lithon\r\n**Lithon** is a toy compiler that translates a small subset of Scheme into Python. It implements the [CodeTalker](http://jaredforsyth.com/projects/codetalker/) compiler compiler.\r\n\r\nLet's say we want to compile the following Scheme into Python:\r\n\r\n```scm\r\n(define (factorial_rec n)\r\n  (if (= n 0)\r\n      1\r\n      (* n (factorial_rec (- n 1)))))\r\n      \r\n(define (factorial_iter n)\r\n  (reduce (lambda (x y) (* x y)) (xrange 1 (+ 1 n))))\r\n  \r\n(map factorial_rec (xrange 1 11))\r\n(map factorial_iter (xrange 11 16))\r\n```\r\n\r\nWe simply write the code to a file and pass it to **lithon.py**:\r\n\r\n```bash\r\n$ lithon.py tests/factorial.scm\r\n```\r\n\r\nWe now have a compiled version of the code in a .py file under the same directory:\r\n\r\n```py\r\ndef factorial_rec(n):\r\n  if n == 0:\r\n    return 1\r\n  else:\r\n    return (n * factorial_rec(n-1))\r\n\r\ndef factorial_iter(n):\r\n  return reduce((lambda x,y: x*y), xrange(1,n+1))\r\n\r\nprint map(factorial_rec, xrange(1,11))\r\nprint map(factorial_iter, xrange(11,16))\r\n```"}